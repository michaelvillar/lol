// Generated by CoffeeScript 1.4.0
(function() {
  var AppController, City, TILE_HEIGHT, TILE_WIDTH, Window, elementPos,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  City = require('city.coffee');

  Window = require('window.coffee');

  TILE_WIDTH = 10;

  TILE_HEIGHT = 10;

  elementPos = function(el) {
    return [parseInt(el.style.left, 10), parseInt(el.style.top, 10)];
  };

  AppController = (function() {

    function AppController(el) {
      var avg, cluster, max, ratio, row, tile, white, x, y, _i, _j, _k, _len, _ref, _ref1, _ref2;
      this.el = el;
      this.updateWindow = __bind(this.updateWindow, this);

      this.tileClick = __bind(this.tileClick, this);

      this.tileMouseOver = __bind(this.tileMouseOver, this);

      this.tileWindow = new Window;
      this.tileWindow.show([10, 10]);
      this.city = new City;
      console.log('population', this.city.population);
      avg = this.city.population / this.city.size[0] / this.city.size[1];
      console.log('avg', avg);
      max = 0;
      _ref = this.city.clusters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cluster = _ref[_i];
        max = Math.max(cluster.population(), max);
      }
      console.log('max', max);
      this.tiles = [];
      for (y = _j = 0, _ref1 = this.city.size[1] - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        row = [];
        this.tiles.push(row);
        for (x = _k = 0, _ref2 = this.city.size[0] - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; x = 0 <= _ref2 ? ++_k : --_k) {
          tile = document.createElement('div');
          tile.classList.add("tile");
          tile.classList.add("tile" + x + "-" + y);
          tile.setAttribute('data-pos', "" + x + "," + y);
          tile.style.left = x * TILE_WIDTH + "px";
          tile.style.top = y * TILE_HEIGHT + "px";
          tile.style.width = TILE_WIDTH + "px";
          tile.style.height = TILE_HEIGHT + "px";
          ratio = this.city.populationAt([x, y]) / max;
          white = Math.round(255 * 2 * (0.5 - Math.min(0.5, ratio)));
          tile.style.backgroundColor = "rgb(255, " + (Math.round(255 * (1 - ratio))) + ", " + white + ")";
          tile.addEventListener('mouseover', this.tileMouseOver);
          tile.addEventListener('click', this.tileClick);
          row.push(tile);
          this.el.appendChild(tile);
        }
      }
    }

    AppController.prototype.tileMouseOver = function(e) {
      var tile;
      if (this.selectedTile) {
        return;
      }
      tile = e.srcElement;
      return this.updateWindow(tile);
    };

    AppController.prototype.tileClick = function(e) {
      var tile;
      tile = e.srcElement;
      if (this.selectedTile) {
        this.selectedTile.classList.remove('selected');
      }
      if (tile === this.selectedTile) {
        this.selectedTile = null;
        return;
      }
      tile.classList.add('selected');
      this.selectedTile = tile;
      return this.updateWindow(tile);
    };

    AppController.prototype.updateWindow = function(tile) {
      var content, index;
      index = tile.getAttribute('data-pos').split(',');
      index[0] = parseInt(index[0]);
      index[1] = parseInt(index[1]);
      content = "Pop: " + (this.city.populationAt(index)) + "<br>    Ground price: $" + (this.city.priceAt(index)) + "    ";
      return this.tileWindow.setContent(content);
    };

    return AppController;

  })();

  module.exports = AppController;

}).call(this);
