// Generated by CoffeeScript 1.7.1
(function() {
  var AppController, City, Controller, GameController, MapController, Station, Toolbar, Window,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Controller = require('controller.coffee');

  MapController = require('mapController.coffee');

  GameController = require('gameController.coffee');

  Window = require('window.coffee');

  Toolbar = require('toolbar.coffee');

  Station = require('station.coffee');

  City = require('city.coffee');

  AppController = (function(_super) {
    __extends(AppController, _super);

    function AppController(el) {
      this.el = el;
      this.updateToolbarCash = __bind(this.updateToolbarCash, this);
      this.incrementCash = __bind(this.incrementCash, this);
      this.mapControllerOver = __bind(this.mapControllerOver, this);
      this.mapControllerClick = __bind(this.mapControllerClick, this);
      AppController.__super__.constructor.apply(this, arguments);
      this.cash = 1000000;
      this.city = new City;
      this.toolbarAction = 'normal';
      this.toolbar = new Toolbar;
      this.toolbar.on('toolbar.tool.normal', (function(_this) {
        return function() {
          return _this.toolbarAction = 'normal';
        };
      })(this));
      this.toolbar.on('toolbar.tool.build', (function(_this) {
        return function() {
          return _this.toolbarAction = 'build';
        };
      })(this));
      this.updateToolbarCash();
      document.body.appendChild(this.toolbar.el);
      this.mapController = new MapController(this.city);
      this.mapController.on('mapController.click', this.mapControllerClick);
      this.mapController.on('mapController.over', this.mapControllerOver);
      document.body.appendChild(this.mapController.el);
      this.gameController = new GameController(this.city);
      this.infoWindow = new Window;
      this.infoWindow.show([8, 56]);
    }

    AppController.prototype.mapControllerClick = function(data) {
      var price;
      if (this.toolbarAction === 'build') {
        price = this.city.priceAt(data.index);
        if (this.cash < price) {
          return alert("You don't have enough money!");
        }
        if (confirm("Are you sure to build this station for $" + price + "?")) {
          this.incrementCash(-price);
          return this.city.addStation(new Station(data.index));
        }
      }
    };

    AppController.prototype.mapControllerOver = function(data) {
      var content, index, station;
      index = data.index;
      content = "Pop: " + (this.city.populationAt(index)) + "<br> Area pop: " + (this.city.populationAt(index, AREA_RADIUS)) + "<br> Ground price: $" + (this.city.priceAt(index));
      station = this.city.stationAt(index);
      if (station) {
        content += "<br>Station<br> Pending people: " + (station.pendingPeople());
      }
      return this.infoWindow.setContent(content);
    };

    AppController.prototype.incrementCash = function(cash) {
      this.cash += cash;
      return this.updateToolbarCash();
    };

    AppController.prototype.updateToolbarCash = function() {
      return this.toolbar.setCash("$" + this.cash);
    };

    return AppController;

  })(Controller);

  module.exports = AppController;

}).call(this);
